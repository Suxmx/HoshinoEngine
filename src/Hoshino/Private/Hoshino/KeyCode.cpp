#include "Hoshino/KeyCode.h"
namespace Hoshino
{
	 ImGuiKey HoshinoKeyToImGuiKey(KeyCode keycode)
	{
		static const ::std::unordered_map<KeyCode, ImGuiKey> keyMap = {
		    {KeyCode::NONE, ImGuiKey_None},
		    {KeyCode::Space, ImGuiKey_Space},
		    {KeyCode::Apostrophe, ImGuiKey_Apostrophe},
		    {KeyCode::Comma, ImGuiKey_Comma},
		    {KeyCode::Minus, ImGuiKey_Minus},
		    {KeyCode::Period, ImGuiKey_Period},
		    {KeyCode::Slash, ImGuiKey_Slash},
		    {KeyCode::Key0, ImGuiKey_0},
		    {KeyCode::Key1, ImGuiKey_1},
		    {KeyCode::Key2, ImGuiKey_2},
		    {KeyCode::Key3, ImGuiKey_3},
		    {KeyCode::Key4, ImGuiKey_4},
		    {KeyCode::Key5, ImGuiKey_5},
		    {KeyCode::Key6, ImGuiKey_6},
		    {KeyCode::Key7, ImGuiKey_7},
		    {KeyCode::Key8, ImGuiKey_8},
		    {KeyCode::Key9, ImGuiKey_9},
		    {KeyCode::Semicolon, ImGuiKey_Semicolon},
		    {KeyCode::Equal, ImGuiKey_Equal},
		    {KeyCode::A, ImGuiKey_A},
		    {KeyCode::B, ImGuiKey_B},
		    {KeyCode::C, ImGuiKey_C},
		    {KeyCode::D, ImGuiKey_D},
		    {KeyCode::E, ImGuiKey_E},
		    {KeyCode::F, ImGuiKey_F},
		    {KeyCode::G, ImGuiKey_G},
		    {KeyCode::H, ImGuiKey_H},
		    {KeyCode::I, ImGuiKey_I},
		    {KeyCode::J, ImGuiKey_J},
		    {KeyCode::K, ImGuiKey_K},
		    {KeyCode::L, ImGuiKey_L},
		    {KeyCode::M, ImGuiKey_M},
		    {KeyCode::N, ImGuiKey_N},
		    {KeyCode::O, ImGuiKey_O},
		    {KeyCode::P, ImGuiKey_P},
		    {KeyCode::Q, ImGuiKey_Q},
		    {KeyCode::R, ImGuiKey_R},
		    {KeyCode::S, ImGuiKey_S},
		    {KeyCode::T, ImGuiKey_T},
		    {KeyCode::U, ImGuiKey_U},
		    {KeyCode::V, ImGuiKey_V},
		    {KeyCode::W, ImGuiKey_W},
		    {KeyCode::X, ImGuiKey_X},
		    {KeyCode::Y, ImGuiKey_Y},
		    {KeyCode::Z, ImGuiKey_Z},
		    {KeyCode::LeftBracket, ImGuiKey_LeftBracket},
		    {KeyCode::Backslash, ImGuiKey_Backslash},
		    {KeyCode::RightBracket, ImGuiKey_RightBracket},
		    {KeyCode::GraveAccent, ImGuiKey_GraveAccent},
		    {KeyCode::Escape, ImGuiKey_Escape},
		    {KeyCode::Enter, ImGuiKey_Enter},
		    {KeyCode::Tab, ImGuiKey_Tab},
		    {KeyCode::Backspace, ImGuiKey_Backspace},
		    {KeyCode::Insert, ImGuiKey_Insert},
		    {KeyCode::Delete, ImGuiKey_Delete},
		    {KeyCode::Right, ImGuiKey_RightArrow},
		    {KeyCode::Left, ImGuiKey_LeftArrow},
		    {KeyCode::Down, ImGuiKey_DownArrow},
		    {KeyCode::Up, ImGuiKey_UpArrow},
		    {KeyCode::PageUp, ImGuiKey_PageUp},
		    {KeyCode::PageDown, ImGuiKey_PageDown},
		    {KeyCode::Home, ImGuiKey_Home},
		    {KeyCode::End, ImGuiKey_End},
		    {KeyCode::CapsLock, ImGuiKey_CapsLock},
		    {KeyCode::ScrollLock, ImGuiKey_ScrollLock},
		    {KeyCode::NumLock, ImGuiKey_NumLock},
		    {KeyCode::PrintScreen, ImGuiKey_PrintScreen},
		    {KeyCode::Pause, ImGuiKey_Pause},
		    {KeyCode::F1, ImGuiKey_F1},
		    {KeyCode::F2, ImGuiKey_F2},
		    {KeyCode::F3, ImGuiKey_F3},
		    {KeyCode::F4, ImGuiKey_F4},
		    {KeyCode::F5, ImGuiKey_F5},
		    {KeyCode::F6, ImGuiKey_F6},
		    {KeyCode::F7, ImGuiKey_F7},
		    {KeyCode::F8, ImGuiKey_F8},
		    {KeyCode::F9, ImGuiKey_F9},
		    {KeyCode::F10, ImGuiKey_F10},
		    {KeyCode::F11, ImGuiKey_F11},
		    {KeyCode::F12, ImGuiKey_F12},
		    {KeyCode::KP0, ImGuiKey_Keypad0},
		    {KeyCode::KP1, ImGuiKey_Keypad1},
		    {KeyCode::KP2, ImGuiKey_Keypad2},
		    {KeyCode::KP3, ImGuiKey_Keypad3},
		    {KeyCode::KP4, ImGuiKey_Keypad4},
		    {KeyCode::KP5, ImGuiKey_Keypad5},
		    {KeyCode::KP6, ImGuiKey_Keypad6},
		    {KeyCode::KP7, ImGuiKey_Keypad7},
		    {KeyCode::KP8, ImGuiKey_Keypad8},
		    {KeyCode::KP9, ImGuiKey_Keypad9},
		    {KeyCode::KPDecimal, ImGuiKey_KeypadDecimal},
		    {KeyCode::KPDivide, ImGuiKey_KeypadDivide},
		    {KeyCode::KPMultiply, ImGuiKey_KeypadMultiply},
		    {KeyCode::KPSubtract, ImGuiKey_KeypadSubtract},
		    {KeyCode::KPAdd, ImGuiKey_KeypadAdd},
		    {KeyCode::KPEnter, ImGuiKey_KeypadEnter},
		    {KeyCode::KPEqual, ImGuiKey_KeypadEqual},
		    {KeyCode::LeftShift, ImGuiKey_LeftShift},
		    {KeyCode::LeftControl, ImGuiKey_LeftCtrl},
		    {KeyCode::LeftAlt, ImGuiKey_LeftAlt},
		    {KeyCode::LeftSuper, ImGuiKey_LeftSuper},
		    {KeyCode::RightShift, ImGuiKey_RightShift},
		    {KeyCode::RightControl, ImGuiKey_RightCtrl},
		    {KeyCode::RightAlt, ImGuiKey_RightAlt},
		    {KeyCode::RightSuper, ImGuiKey_RightSuper},
		    {KeyCode::Menu, ImGuiKey_Menu}};

		auto it = keyMap.find(keycode);
		return (it != keyMap.end()) ? it->second : ImGuiKey_None;
	}

} // namespace Hoshino